@page "/albums/{Slug}"
@inject AlbumService AlbumService

<PageTitle>@_title</PageTitle>
<h1 class="detail-title">@_title?.ToMarkupString()</h1>

<div id="view-content" class="gap-solid"></div>

@if (_paginationModel != null)
{
    <PaginationPartial Model="_paginationModel"></PaginationPartial>
}

@code
{
    [Parameter]
    public string Slug { get; set; } = null!;

    [Parameter]
    [SupplyParameterFromQuery]
    public int Current { get; set; } = 1;

    [Parameter]
    [SupplyParameterFromQuery]
    public int PageSize { get; set; } = 10;

    string? _title;
    PaginationModel? _paginationModel;

    protected override async Task OnParametersSetAsync()
    {
        var validPage = PageHelper.CheckPage(PageSize, Current);
        PageSize = validPage.PageSize;
        Current = validPage.Current;

        var requestAlbumBlogResponse =
            await AlbumService.GetBlogBriefListByAlbumSlugAsync(Slug, PageSize, Current);
        _title = $"专辑-{requestAlbumBlogResponse?.AlbumName}";
        var blogs = requestAlbumBlogResponse?.Records;
        var pages = Enumerable.Range(1, requestAlbumBlogResponse!.TotalPage).ToArray();
        _paginationModel = new PaginationModel(blogs, $"/albums/{Slug}?", Current, pages, requestAlbumBlogResponse!.Total, PageSize, requestAlbumBlogResponse.TotalPage);
    }
}