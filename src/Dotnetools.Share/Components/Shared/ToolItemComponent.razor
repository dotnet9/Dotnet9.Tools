<h2 class="title">@Kind?.Item()?.Name</h2>

<p>
    @if (!string.IsNullOrWhiteSpace(_item?.LearnUrl))
    {
        <a href="@_item.LearnUrl" target="_blank" class="link">参考来源</a>
    }
    @if (!string.IsNullOrWhiteSpace(_serverUrl))
    {
        <a href="@_serverUrl" target="_blank" class="link server">Server版</a>
    }
    @if (!string.IsNullOrWhiteSpace(_wasmUrl))
    {
        <a href="@_wasmUrl" target="_blank" class="link wasm">Wasm版</a>
    }
    @if (!string.IsNullOrWhiteSpace(_github))
    {
        <a href="@_github" target="_blank" class="link github">工具源码</a>
    }
</p>

<MDivider/>

@switch (Kind)
{
    case ToolKind.ToolCountDown:
        <CountDown/>
        break;
    case ToolKind.ToolJsonFormatter:
        <JsonFormatter/>
        break;
    case ToolKind.ToolRegexTester:
        <RegexTester/>
        break;
    case ToolKind.ToolRgb:
        <RGB/>
        break;
    case ToolKind.ToolStringEncoder:
        <StringEncoder/>
        break;
    case ToolKind.ToolTimestamp:
        <Timestamp/>
        break;


    case ToolKind.GameMinesweeper:
        <Minesweeper/>
        break;
    case ToolKind.GameTetris:
        <Tetris/>
        break;
    case ToolKind.GameGobang:
        <Gobang/>
        break;
    case ToolKind.GameGuessingNumbers:
        <GuessingNumbers/>
        break;
    case ToolKind.GameTictactoe:
        <Tictactoe/>
        break;
}

@code {

    [Parameter]
    public ToolKind? Kind { get; set; }

    private ToolItem? _item;
    private string? _serverUrl;
    private string? _wasmUrl;
    private string? _github;

    protected override Task OnInitializedAsync()
    {
        _item = Kind?.Item();
        if (!string.IsNullOrWhiteSpace(_item?.Url))
        {
            _serverUrl = $"https://dotnet9.com{_item.Url}";
            _wasmUrl = $"https://dotnetools.com{_item.Url}";
        }
        if (!string.IsNullOrWhiteSpace(_item?.Github))
        {
            _github = $"https://github.com/dotnet9/Dotnet9/blob/develop/src/Dotnetools.Share/Components{_item.Github}";
        }

        return base.OnInitializedAsync();
    }

}